nohup: ignoring input
Testing for unit cost greedy algorithm
INFO:root:Initializing...
INFO:root:Running naive greedy algorithm...
INFO:root:Current placement size: 0, budget left: 100000
  0%|          | 0/256371 [00:00<?, ?it/s]  0%|          | 1/256371 [00:00<13:12:08,  5.39it/s]  0%|          | 2/256371 [00:00<10:39:25,  6.68it/s]  0%|          | 3/256371 [00:00<12:21:46,  5.76it/s]  0%|          | 4/256371 [00:00<10:51:14,  6.56it/s]  0%|          | 5/256371 [00:00<11:02:03,  6.45it/s]  0%|          | 6/256371 [00:01<13:04:49,  5.44it/s]  0%|          | 7/256371 [00:01<11:34:34,  6.15it/s]  0%|          | 8/256371 [00:01<11:03:40,  6.44it/s]  0%|          | 9/256371 [00:01<13:21:33,  5.33it/s]  0%|          | 10/256371 [00:01<13:26:43,  5.30it/s]  0%|          | 11/256371 [00:01<11:57:56,  5.95it/s]  0%|          | 12/256371 [00:02<11:22:13,  6.26it/s]  0%|          | 13/256371 [00:02<10:59:28,  6.48it/s]  0%|          | 14/256371 [00:02<10:34:31,  6.73it/s]  0%|          | 15/256371 [00:02<10:41:05,  6.66it/s]  0%|          | 16/256371 [00:02<10:15:49,  6.94it/s]  0%|          | 17/256371 [00:02<10:00:49,  7.11it/s]  0%|          | 18/256371 [00:02<11:10:46,  6.37it/s]  0%|          | 19/256371 [00:03<11:49:18,  6.02it/s]  0%|          | 20/256371 [00:03<11:20:39,  6.28it/s]  0%|          | 21/256371 [00:03<11:27:41,  6.21it/s]  0%|          | 22/256371 [00:03<12:42:55,  5.60it/s]  0%|          | 23/256371 [00:03<13:33:02,  5.25it/s]  0%|          | 24/256371 [00:03<13:05:18,  5.44it/s]  0%|          | 25/256371 [00:04<12:51:20,  5.54it/s]  0%|          | 26/256371 [00:04<11:43:05,  6.08it/s]  0%|          | 29/256371 [00:04<7:25:30,  9.59it/s]   0%|          | 30/256371 [00:04<8:44:31,  8.15it/s]  0%|          | 31/256371 [00:04<10:27:50,  6.80it/s]  0%|          | 32/256371 [00:05<10:31:39,  6.76it/s]  0%|          | 33/256371 [00:05<10:23:07,  6.86it/s]  0%|          | 34/256371 [00:05<10:38:33,  6.69it/s]  0%|          | 35/256371 [00:05<11:50:11,  6.02it/s]  0%|          | 36/256371 [00:05<11:17:07,  6.31it/s]  0%|          | 37/256371 [00:05<11:20:13,  6.28it/s]  0%|          | 38/256371 [00:05<10:50:49,  6.56it/s]  0%|          | 39/256371 [00:06<11:27:35,  6.21it/s]  0%|          | 40/256371 [00:06<10:57:40,  6.50it/s]  0%|          | 41/256371 [00:06<12:40:54,  5.61it/s]  0%|          | 42/256371 [00:06<12:32:09,  5.68it/s]  0%|          | 43/256371 [00:06<12:23:14,  5.75it/s]  0%|          | 44/256371 [00:07<12:05:49,  5.89it/s]  0%|          | 45/256371 [00:07<11:45:25,  6.06it/s]  0%|          | 46/256371 [00:07<11:10:00,  6.38it/s]  0%|          | 47/256371 [00:07<11:44:31,  6.06it/s]  0%|          | 48/256371 [00:07<13:11:14,  5.40it/s]  0%|          | 49/256371 [00:07<13:55:23,  5.11it/s]  0%|          | 50/256371 [00:08<12:59:57,  5.48it/s]  0%|          | 51/256371 [00:08<13:54:57,  5.12it/s]  0%|          | 52/256371 [00:08<12:33:15,  5.67it/s]  0%|          | 53/256371 [00:08<12:00:26,  5.93it/s]  0%|          | 54/256371 [00:08<12:37:50,  5.64it/s]  0%|          | 55/256371 [00:08<11:40:00,  6.10it/s]  0%|          | 56/256371 [00:09<10:44:51,  6.62it/s]  0%|          | 57/256371 [00:09<12:09:21,  5.86it/s]  0%|          | 58/256371 [00:09<11:52:53,  5.99it/s]  0%|          | 59/256371 [00:09<12:12:07,  5.83it/s]  0%|          | 60/256371 [00:09<11:18:48,  6.29it/s]  0%|          | 61/256371 [00:10<13:54:49,  5.12it/s]  0%|          | 62/256371 [00:10<14:29:15,  4.91it/s]  0%|          | 63/256371 [00:10<12:40:03,  5.62it/s]  0%|          | 64/256371 [00:10<13:51:51,  5.14it/s]  0%|          | 67/256371 [00:10<7:56:22,  8.97it/s]   0%|          | 69/256371 [00:11<12:45:06,  5.58it/s]  0%|          | 70/256371 [00:11<11:57:00,  5.96it/s]  0%|          | 71/256371 [00:11<11:14:08,  6.34it/s]  0%|          | 72/256371 [00:11<11:03:42,  6.44it/s]  0%|          | 73/256371 [00:11<10:37:21,  6.70it/s]  0%|          | 74/256371 [00:12<12:56:14,  5.50it/s]  0%|          | 75/256371 [00:12<11:58:53,  5.94it/s]  0%|          | 76/256371 [00:12<13:14:19,  5.38it/s]  0%|          | 77/256371 [00:12<12:37:50,  5.64it/s]  0%|          | 78/256371 [00:12<14:28:00,  4.92it/s]  0%|          | 79/256371 [00:13<13:31:12,  5.27it/s]  0%|          | 80/256371 [00:13<14:28:56,  4.92it/s]  0%|          | 81/256371 [00:13<16:26:16,  4.33it/s]  0%|          | 82/256371 [00:13<16:10:18,  4.40it/s]  0%|          | 83/256371 [00:14<14:57:57,  4.76it/s]  0%|          | 84/256371 [00:14<13:09:15,  5.41it/s]  0%|          | 85/256371 [00:14<11:51:08,  6.01it/s]
Traceback (most recent call last):
  File "/home/q/outbreak_detection/main.py", line 53, in <module>
    result = algo.naive_greedy('UC')
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/q/outbreak_detection/algorithm.py", line 134, in naive_greedy
    r = self.marginal_gain(A, node, cost_type)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/q/outbreak_detection/algorithm.py", line 167, in marginal_gain
    r = self.reward([node])
        ^^^^^^^^^^^^^^^^^^^
  File "/home/q/outbreak_detection/algorithm.py", line 175, in reward
    total_reward = self.__detection_time(placement)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/q/outbreak_detection/algorithm.py", line 285, in __detection_time
    time = min(self.G[shorted_path_a[-2]][shorted_path_a[-1]]['Timestamp'], self.G[shorted_path_b[-2]][shorted_path_b[-1]]['Timestamp']) - start_edge['Timestamp']
                                                                                                                                           ~~~~~~~~~~^^^^^^^^^^^^^
KeyError: 'Timestamp'
Testing for heuristic approaches
INFO:root:Initializing...
Traceback (most recent call last):
  File "/home/q/outbreak_detection/main.py", line 60, in <module>
    result = algo.heuristics(args.function)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/q/outbreak_detection/algorithm.py", line 506, in heuristics
    total_cost += self.network.node_cost[new_node]
                  ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
KeyError: 429592
INFO:root:Initializing...
Traceback (most recent call last):
  File "/home/q/outbreak_detection/main.py", line 60, in <module>
    result = algo.heuristics(args.function)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/q/outbreak_detection/algorithm.py", line 506, in heuristics
    total_cost += self.network.node_cost[new_node]
                  ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
KeyError: 90979
INFO:root:Initializing...
INFO:root:{'algo': 'outlinks', 'placement': [88, 14454, 677, 1988, 349, 283, 3571, 6948, 14572, 68278, 7533, 9964, 220, 5226, 519, 3549, 31650, 2567, 138, 19913, 34268, 2342, 3237, 1276, 15, 205, 6940, 8135, 16460, 4446, 39511, 979, 8, 3998, 960, 5245, 14615, 1503, 1343, 6971, 301, 13416, 3393, 245, 14648, 356, 69417, 14549, 7698, 7627, 383, 857, 2417, 511, 294416, 3726, 35481, 206, 31957, 14611, 17004, 8942, 14075, 12281, 132690, 16344, 11714, 216, 8806, 47794, 250519, 34719, 236, 27738, 5193, 16783, 14625, 35843, 49182, 8767, 1274, 1852, 8016, 7274, 4076, 130884, 4526, 16527, 14650, 35248, 2138, 2662, 280, 96622, 12465, 2014, 322, 2347, 213, 11991, 8208, 57105, 387, 77, 7436, 9881, 335, 2166, 13808, 54039, 13813, 11946, 30230, 11792, 485, 4208, 113099, 8603, 71, 14564, 2941, 4368, 16358, 2055, 75369, 2280, 198048, 12687, 16452, 32972, 37532, 1267, 50361, 26186, 99369, 26486, 7756, 1134, 15769, 34312, 15538, 34963, 1062, 980, 2179, 2348, 95905, 85042, 26352, 118818, 9323, 2934, 68099, 503, 352, 19870, 891, 750, 51742, 7592, 2353, 531, 759, 12510, 13249, 37502, 36660, 3235, 40279, 957, 69237, 7437, 3419, 32226, 13799, 468, 33355, 239782, 59945, 19604, 7590, 51, 20050, 42182, 20522, 3808, 1945, 11036, 268, 1553, 35366, 8321, 323, 4895, 248, 16440, 4200, 4730, 7540, 2177, 3479, 274, 4893, 14577, 8959, 20920], 'reward': 0.2119878493477959}
INFO:root:Initializing...
Traceback (most recent call last):
  File "/home/q/outbreak_detection/main.py", line 60, in <module>
    result = algo.heuristics(args.function)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/q/outbreak_detection/algorithm.py", line 506, in heuristics
    total_cost += self.network.node_cost[new_node]
                  ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
KeyError: 818
